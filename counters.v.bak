module DiceRoller (
	input wire clk, // clock input
	input wire rst, // reset input
	output reg [2:0] dice1_out, // dice 1 output
	output reg [2:0] dice2_out  // dice 2 output
);

	reg [15:0] lfsr1; // 16 bit LFSR for dice 1
	reg [15:0] lfsr2; // 16 bit LFSR for dice 2
	
	always @(posedge clk or posedge rst) begin
		if (rst) begin
			lfsr1 <= 16'hACE1; // inital seeds
			lfsr2 <= 16'hFED2;
		end else begin
			lfsr1 <= {lfsr1[0]^lfsr1[2], lfsr1[0:14]}; // lfsr update	
			lfsr2 <= {lfsr2[0]^lfsr2[2], lfsr2[0:14]};
		end
	end
	
	always @* begin
		dice1_out = lfsr1[2:0] + 1; // mapping the output
		dice2_out = lfsr2[2:0] + 1;
	end
	
endmodule
